name: Weekly Build Image Update
# Weekly Build Image Update
# This workflow updates the installed build tools once per week (via schedule).
# Example updates include: Homebrew, Xcodes, and packages. Adjust as needed.
# After updates, the VM is committed. To save as a new image:
#   orka3 vm save <vm_name> <new_image_name>
# Optionally, push to an OCI repository with the 'latest' tag for use in caching.
# Requirements:
#   - VM must have 'orka3' CLI and 'jq' installed.
#   - Orka CLI must be configured: orka3 config set --api-url <address>

on:
  schedule:
    - cron: '45 2 * * 0' # Minute, Hour, Day of month, Month, day of week
                         # 02:45 UTC, every Sunday of every month
    

  workflow_dispatch:
  repository_dispatch:

env:
  IMAGE_NAME: github-actions-image # Orka image to be updated
  SERVER_ADDRESS: ghcr.io/repository
  

jobs:
  build:
    runs-on: gharunner # Name of your Orka Github Actions Runner
    steps:
      - uses: actions/checkout@v3

      - name: Get VM Info 
        # Uses the internal metadata endpoint
        # See https://orkadocs.macstadium.com/docs/vm-metadata for more info
        run: |
          vm_name=$(curl http://169.254.169.254/metadata/orka_vm_name | /opt/homebrew/bin/jq -r '.value')
          echo "VM_NAME=$vm_name" >> $GITHUB_ENV

      - name: Echo VM Name
        run: echo "$VM_NAME"
    
      - name: Update Brew
        run: /opt/homebrew/bin/brew update

      - name: Update Xcodes
        run: /opt/homebrew/bin/xcodes install --latest

      - name: Update Brew Packages
        run: /opt/homebrew/bin/brew upgrade
  
      - name: Set Orka Token
        # Uses a service account created within orka
        # orka3 serviceaccount create <accountname>
        # orka3 serviceaccount token <accountname>
        env:
          ORKA_TOKEN: ${{ secrets.ORKA_TOKEN }}
        run: /usr/local/bin/orka3 user set-token "$ORKA_TOKEN"
      
      - name: Commit Image
        env:
          vm_name: ${{ env.VM_NAME }}
        run: /usr/local/bin/orka3 vm commit $vm_name

      - name: Check Status
        run: |
          while true; do
            STATUS=$(/usr/local/bin/orka3 image list $IMAGE_NAME | grep -w $IMAGE_NAME | awk '{print $NF}')
            echo "Current Status: $STATUS"
            if [ "$STATUS" == "Ready" ]; then
              echo "Image is Ready."
              break
            fi
            echo "Image not ready yet. Retrying in 30 seconds..."
            sleep 30
          done

      #- name: Upload to OCI
      #  env:
      #    vm_name: ${{ env.VM_NAME }}
      #  run: /usr/local/bin/orka3 vm push $vm_name $SERVER_ADDRESS/$IMAGE_NAME:latest

      - name: Cache Image
        run: /usr/local/bin/orka3 imagecache add $IMAGE_NAME --all
        # Or if caching from OCI repository
        # run: /usr/local/bin/orka3 imagecache add $SERVER_ADDRESS/$IMAGE_NAME:latest --all
      
